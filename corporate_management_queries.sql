-- Corporate Management SQL Queries
-- This file contains all SQL queries needed for corporate data management

-- IMPORTANT: First run the migration file to create the table:
-- supabase/migrations/20250919000001_create_corporate_table.sql

-- 1. The corporate table is created via migration file (recommended approach)
-- Table structure:
-- corporate (
--     id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
--     name VARCHAR(255) NOT NULL UNIQUE,
--     description TEXT,
--     contact_person VARCHAR(255),
--     phone VARCHAR(20),
--     email VARCHAR(255),
--     address TEXT,
--     created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
--     updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
-- )

-- 2. Sample UUID values for reference:
-- Example UUIDs generated by gen_random_uuid():
-- a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
-- 6ba7b810-9dad-11d1-80b4-00c04fd430c8
-- 550e8400-e29b-41d4-a716-446655440000

-- 3. Insert new corporate record
-- Example: Adding a new corporate entity
INSERT INTO corporate (name, created_at, updated_at)
VALUES ('Reliance Industries Ltd', NOW(), NOW());

-- 4. Insert multiple corporate records (batch insert)
INSERT INTO corporate (name, created_at, updated_at) VALUES
('Tata Consultancy Services', NOW(), NOW()),
('Infosys Limited', NOW(), NOW()),
('Wipro Technologies', NOW(), NOW()),
('HDFC Bank Limited', NOW(), NOW()),
('ICICI Bank Limited', NOW(), NOW());

-- 5. Select all corporate records (for display in UI)
SELECT
    id,
    name,
    description,
    contact_person,
    phone,
    email,
    address,
    created_at,
    updated_at
FROM corporate
ORDER BY created_at DESC;

-- 6. Select corporate records with search functionality
-- This query supports the search feature in your UI
SELECT
    id,
    name,
    description,
    contact_person,
    phone,
    email,
    address,
    created_at,
    updated_at
FROM corporate
WHERE name ILIKE '%search_term%'
ORDER BY created_at DESC;

-- 7. Update existing corporate record
-- Example: Update corporate name using actual UUID
UPDATE corporate
SET
    name = 'Updated Corporate Name',
    updated_at = NOW()
WHERE id = 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11';

-- Update with dynamic UUID (replace with actual UUID from your data)
UPDATE corporate
SET
    name = 'New Company Name',
    description = 'Updated company description',
    updated_at = NOW()
WHERE id = (SELECT id FROM corporate WHERE name = 'Reliance Industries Ltd' LIMIT 1);

-- 8. Delete corporate record
-- Example: Delete using actual UUID
DELETE FROM corporate
WHERE id = 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11';

-- Delete with dynamic lookup (safer approach)
DELETE FROM corporate
WHERE name = 'Company Name to Delete';

-- 9. Check if corporate name already exists (for validation)
SELECT COUNT(*) as count
FROM corporate
WHERE LOWER(name) = LOWER('Reliance Industries Ltd');

-- Check for duplicate before insert (practical example)
SELECT COUNT(*) as count
FROM corporate
WHERE LOWER(name) = LOWER('New Company Name');

-- 10. Get corporate record by ID
-- Example: Get record using actual UUID
SELECT
    id,
    name,
    description,
    contact_person,
    phone,
    email,
    address,
    created_at,
    updated_at
FROM corporate
WHERE id = 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11';

-- Get record by name (more practical for lookups)
SELECT
    id,
    name,
    description,
    contact_person,
    phone,
    email,
    address,
    created_at,
    updated_at
FROM corporate
WHERE name = 'Tata Consultancy Services';

-- 11. Get corporate records count
SELECT COUNT(*) as total_corporate FROM corporate;

-- 12. Get recently added corporate records (last 30 days)
SELECT
    id,
    name,
    created_at
FROM corporate
WHERE created_at >= (NOW() - INTERVAL '30 days')
ORDER BY created_at DESC;

-- 13. Update trigger to automatically update updated_at column
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_corporate_updated_at
    BEFORE UPDATE ON corporate
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- 14. Example queries for your current form data
-- When user submits "Reliance Industries" from the form:
INSERT INTO corporate (name)
VALUES ('Reliance Industries');

-- When user submits "HDFC Bank" from the form:
INSERT INTO corporate (name)
VALUES ('HDFC Bank');

-- Batch insert multiple companies from form submissions:
INSERT INTO corporate (name) VALUES
('Microsoft Corporation'),
('Apple Inc.'),
('Google LLC'),
('Amazon.com Inc.'),
('Meta Platforms Inc.'),
('Tesla Inc.'),
('Netflix Inc.'),
('Adobe Inc.'),
('Salesforce Inc.'),
('Oracle Corporation');

-- Insert with error handling (prevents duplicate name errors):
INSERT INTO corporate (name)
SELECT 'New Company Name'
WHERE NOT EXISTS (
    SELECT 1 FROM corporate WHERE LOWER(name) = LOWER('New Company Name')
);

-- 15. Query to populate dropdown in patient registration
SELECT id, name
FROM corporate
ORDER BY name ASC;

-- 16. Advanced search with pagination (for future use)
-- Search for companies containing 'tech' (case-insensitive)
SELECT
    id,
    name,
    created_at
FROM corporate
WHERE name ILIKE '%tech%'
ORDER BY created_at DESC
LIMIT 50 OFFSET 0;

-- Search with multiple criteria
SELECT
    id,
    name,
    description,
    created_at
FROM corporate
WHERE
    (name ILIKE '%bank%' OR description ILIKE '%bank%')
    OR (name ILIKE '%financial%' OR description ILIKE '%financial%')
ORDER BY name ASC
LIMIT 25 OFFSET 0;

-- 17. Backup query - Export all corporate data
SELECT
    name,
    description,
    contact_person,
    phone,
    email,
    address,
    created_at
FROM corporate
ORDER BY name;

-- 18. Production-ready queries with real UUIDs
-- Get specific corporate record (replace UUID with actual value from your database)
SELECT * FROM corporate
WHERE id = (SELECT id FROM corporate WHERE name = 'Reliance Industries Ltd' LIMIT 1);

-- Update specific record safely
UPDATE corporate
SET
    description = 'Updated description',
    contact_person = 'New Contact Person',
    updated_at = NOW()
WHERE name = 'Tata Consultancy Services';

-- 19. Utility queries for debugging
-- Show all corporate records with their UUIDs (for reference)
SELECT
    id,
    name,
    CASE
        WHEN created_at > NOW() - INTERVAL '7 days' THEN 'Recently Added'
        WHEN created_at > NOW() - INTERVAL '30 days' THEN 'Added This Month'
        ELSE 'Older Record'
    END as record_age
FROM corporate
ORDER BY created_at DESC;

-- 20. Performance monitoring queries
-- Check table size and performance
SELECT
    schemaname,
    tablename,
    attname,
    n_distinct,
    correlation
FROM pg_stats
WHERE tablename = 'corporate';

-- Note: All UUIDs in this file are examples. In production, use:
-- 1. gen_random_uuid() for new records
-- 2. Actual UUIDs returned from SELECT queries for updates/deletes
-- 3. Name-based lookups for safer operations